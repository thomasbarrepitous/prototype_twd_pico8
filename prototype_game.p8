pico-8 cartridge // http://www.pico-8.com
version 16
__lua__
--global varibales, update, draw, init, etc

-- size of the screen in pixels
screen_x = 128
screen_y = 128

-- timer
last = 0
now = 0
last_attack = 0
attack_cooldown = 0.5

-- 0 = menu
-- 1 = game
-- 2 = game over
-- 4 = warning
game_state = 0

-- in game variables
max_y = 112
x = 10  y = 112
gravity = 0.9
--in order to not spawn too many
z_number = 0
max_z_number = 10

animation_speed = 3
frame = 0

actor = {}
zombie = {}
obstacle = {}
interaction = {}
bullet = {}

jump = false
bullet_shoot = false
house = false
haunted_house = false
lever = false

interaction_map = 0
last_map = 1
last_x = x

function _update()
	if game_state == 0 then
		update_menu()
	elseif game_state == 1 then
		update_game()
	elseif game_state == 2 then
		update_gameover()
	elseif game_state == 4 then
		update_warning()
	end
end

function _draw()
	cls()
	if game_state == 0 then
		draw_menu()
	elseif game_state == 1 then
		draw_game()
	elseif game_state == 2 then
		draw_gameover()
	elseif game_state == 4 then
		draw_warning()
	end
end

function _init()
	menuinit()
	game_state=4
end

function gameinit()
	map()
	game_state = 1
	game_map = 1
	game_map_init()
	player = make_actor(x,y)
end

function game_map_init()
	clear_everything()	
	house = false
	haunted_house = false
	
	if game_map == 1 then
		
		make_obstacle(70,112,7,10,64)
		make_interaction(89,105,6,14,98)
	
	elseif game_map == 2 then
	
		make_obstacle(90,112,7,10,64)
		make_obstacle(30,112,7,10,64)
		make_interaction(65,105,15,14,99)
				
	elseif game_map == 3 then
		make_obstacle(120,112,7,10,80)
		make_obstacle(120,104,7,10,80)
		make_obstacle(120,96,7,10,80)
		make_obstacle(120,88,7,10,80)
		make_obstacle(120,80,7,10,80)
		make_obstacle(120,72,7,10,80)
	elseif game_map == 4 then
		make_interaction(31,105,15,14,99)
	elseif game_map == 5 then
	elseif game_map == 6 then
	elseif game_map == 98 then
		house = true
		make_obstacle(48,112,10,10,112)
		make_obstacle(56,112,10,10,113)
		make_obstacle(64,112,8,10,114)
		make_obstacle(56,104,6,5,96)
		make_obstacle(112,112,6,5,110)
		wall_house()
	elseif game_map == 99 then
		haunted_house = true
		make_obstacle(48,112,10,10,112)
		make_obstacle(56,112,10,10,113)
		make_obstacle(64,112,8,10,114)
		make_obstacle(56,104,6,5,96)
		make_obstacle(112,112,6,5,110)
		make_interaction(105,105,6,14,4)
		wall_house()
	end
end

function wall_house()
	-- wall left
	make_obstacle(0,80,6,8,16)
	make_obstacle(0,88,6,8,16)
	-- wall right
	make_obstacle(120,80,8,8,16)
	make_obstacle(120,88,8,8,16)
	make_obstacle(120,96,8,8,16)
	make_obstacle(120,104,8,8,16)
	make_obstacle(120,112,8,8,16)
	make_obstacle(120,120,8,8,16)
end

function update_game()	
	
	if a.noise >= 0.5 then
		a.noise -=0.5
	else
		a.noise = 0
	end
	
	if a.noise < 0 then
		a.noise = 0
	end
	
	if a.noise > 100 then
		a.noise = 100
	end
	
	if a.y > screen_y-2 then
		a.hp=0
	end
	
	if a.hp == 0 then
		game_state = 2
		clear_everything()
		for z in all(zombie) do
			del(zombie,z)
		end
		sfx(1)
	end	
	
	if a.noise>99 and z_number < max_z_number and not (house or haunted_house) then		
		repeat
			z_x = rnd(screen_x-10)+10	
		until not is_in_obstacle(z_x,6)
		
		make_zombie(z_x,112,rnd(75)*0.01+0.5,game_map)
		z_number+=1
		a.noise-=30
	end

	if a.x <= 0 then
		clear_everything()
		if not house or haunted_house or game_map==4 then
	 	a.x = screen_x-5
	 	a.new_x = screen_x-5
			game_map-=1
		end
		if house or haunted_house then
			if last_map == 4 then
				last_map = 2
			end
			a.x = last_x
			a.new_x = last_x
			game_map=last_map
		end
		
		game_map_init()
	end
	
	if a.x+3 >= screen_x and not (house or haunted_house) then
		game_map+=1
		clear_everything()
		a.x = 3
		a.new_x = 3
		game_map_init()
	end
	
	control_player()
	bullet_moving()
	zombie_moving()
end

function is_in_obstacle(x,h)
	for o in all(obstacle) do
		if x+h >= o.x and x <= o.x+o.h then
			return true
		end
	end
	return false
end

function clear_everything()
	for b in all(bullet) do
		del(bullet,b)
	end
	for o in all(obstacle) do
		del(obstacle,o)
	end
	for i in all(interaction) do
		del(interaction,i)
	end
end
-->8
-- draw --

function draw_player()
	if a.invincible > 20 then
		pal(15,8)
		if a.invincible >25 then
			spr(33,a.x,a.y-13)
			sfx(0)
		end
	else
		pal()
	end
 
	if a.invincible%2==0 or a.invincible<0 then
  spr(a.state,a.x,a.y-6)
		spr(a.state+16,a.x,a.y)
	end
		
		--in case there is a weapon to show
		if a.state == 8 then
			spr(a.state+32,a.x-8,a.y-6)
		end
		if a.state == 9 then
			spr(a.state+32,a.x+8,a.y-6)
		end
		
		a.frame+=1
end

function draw_bullet()
	for b in all(bullet) do
		spr(b.spr,b.x,b.y)
	end
end

function draw_zombies()
 for z in all(zombie) do
 	if z.on_map then	
 	 if z.spawning < 0 then
		 	if z.hurt then
		 		spr(15,z.x,z.y-6)
		 		spr(31,z.x,z.y)
		 		z.hurt = false
		 	else
		 		spr(14,z.x,z.y-6)
		 		spr(30,z.x,z.y)
		 	end
		 else
		  if (z.spawning > 40) then
		  	spr(13,z.x,z.y+5)
		  elseif (z.spawning > 20) and (z.spawning < 40) then
		  	spr(12,z.x,z.y+1)
		  	spr(28,z.x,z.y+7)
		  elseif (z.spawning > 0) and (z.spawning < 20) then
		  	spr(11,z.x,z.y-2)
		  	spr(27,z.x,z.y+4)
		  end
	  end
	 end
	end
end

function draw_obstacles()
	for o in all(obstacle) do	
		if o.hurt then
			spr(65,o.x,o.y)
		else	
			spr(o.spr,o.x,o.y)
		end
	end
end

function draw_hud()
	-- noise bar background
	rectfill(3,3,103,5,5)
	-- noise bar
	rectfill(3,3,3+a.noise,5,10)
	if flr(a.noise)==100 then
		print(flr(a.noise),109,1,8)	
	else
		print(flr(a.noise),109,1,10)
	end
	-- ♥♥♥ hp bar
	-- interval between hearts
	cpt=0
	for i=1,a.hp do
		spr(44,3+cpt,7)
		cpt+=9
	end
end

function draw_gameover()
	print("game over ...",43,60,6)	
	print("press 🅾️ or ❎ to continue.",15,75,6)
	sfx(1)	
end

function draw_warning()
 now = time()
 print("░ survival zombies ░",22,33,frame%2+11)
	print("will you survive enough time",8,60,frame%2+11)
	print("to be the last one on earth ?",6,70,frame%2+11)
	print("tip : you can hide in houses ! ",4,80,frame%2+11)
	if (now - last)>3 then	
		print("press 🅾️ or ❎ to continue",12,100,time()%2+7)	
	end
	frame+=1
end

function draw_menu()
	cls(col2)
 draw_options()
 if (octopus==true) then
 	draw_octopus()
 end
end

function draw_game()
	cls()
	if game_map == 1 then
	 map(0,0,0,64,16,8)
		-- sky so always the same except
		-- if we want to draw over 64px
	 map(17,0,0,0,16,8)
	elseif game_map == 2 then
		map(34,0,0,64,16,8)
 	map(17,0,0,0,16,8)
	elseif game_map == 3 then
		map(51,0,0,64,16,8)
 	map(17,0,0,0,16,8)
	elseif game_map == 4 then
		map(68,0,0,64,16,8)
 	map(17,0,0,0,16,8)
	elseif game_map == 5 then
		map(85,0,0,64,16,8)
 	map(17,0,0,0,16,8)
	elseif game_map == 6 then
		map(102,0,0,64,16,8)
 	map(17,0,0,0,16,8)
 elseif game_map == 7 then
 elseif game_map == 8 then
 elseif game_map == 9 then
 elseif game_map == 10 then
	elseif game_map == 98 then
		map(0,8,0,64,16,8)
 	map(17,0,0,0,16,8)
	elseif game_map == 99 then
		map(0,16,0,64,16,8)
 	map(17,0,0,0,16,8)
end
		
		draw_player()
		draw_zombies()
		draw_obstacles()
		draw_bullet()
		draw_hud()
		
		-- hitboxes

		-- player
  -- rectfill(a.x,a.y-a.h,a.x+a.w,a.y+a.h,14)
 	
 	-- interactions items
  --	for i in all(interaction) do
  -- rectfill(i.x,i.y,i.x+i.w,i.y+i.h,14)
	 -- end
		
		-- obstacles
	 -- for o in all(obstacle) do
	 -- rectfill(o.x,o.y,o.x+o.w,o.y+o.h,14)
	 -- end
	 
	 -- zombies
		-- for z in all(zombie) do
		-- 	rectfill(z.x,z.y-6,z.x+z.w,z.y+z.h,14)
		-- end
end
-->8
-- player --

function make_actor(x, y)
 a={}
 a.x = x
 a.y = y
 a.new_x = x
 a.new_y = y
 a.h = 7
 a.w = 6
 a.spr = 3
 a.frame = 0
 a.noise = 0
 a.hp = 7
 a.weapon = 1
 a.invincible=0
 
 -- state of the player :
 -- 1- normal, the player stand without moving
 -- 2- running left
 -- 3- running right
 -- 4- jumping horizontaly
 -- 5- jumping left
 -- 6- jumping right
 -- 7- falling
 -- 8- attacking left
 -- 9- attacking right
 -- 10- invincible
 
 a.state = 1
 
 add(actor,a)
return a
end

function control_player()
a.d_left = false
a.d_right = false

	if (a.y>=max_y) then 
		jump=false 
		a.state = 1
	end

	if (a.y<=max_y) then 
	 a.new_y=a.new_y+gravity
		if not player_obstacle_collision() then
			a.y=a.y+gravity
			a.state = 7
		else
			jump = false
			a.new_y=a.new_y-gravity
			a.state = 1 
		end
	end
	if (btn(0)) then
		a.new_x-=2.5
 	if not player_obstacle_collision() and not ((game_map==1 or game_map==4) and a.x<3) then
 		a.x-=2.5
 		if jump then
 			a.state = 5
 		else
 			a.state = 2
 		end
 		if a.noise < 100 then
 			a.noise+=1 
 		end
 	else
 		a.new_x+=2.5
		end
	end
	if (btn(1)) then
		a.new_x+=2.5
	 if not player_obstacle_collision() then
	  a.x+=2.5
	  if jump then
	 		a.state = 6
	 	else
	 		a.state = 3
	 	end
	  if a.noise < 100 then
	  	a.noise+=1
	  end
	 else
		 a.new_x-=2.5
	 end
	end

 if (btn(2)) then 
	 if (jump==false) then
		 --stop jumping when ecounter an obstacle
		 for i=1,15 do
	 		a.new_y-=1
		  if(not player_obstacle_collision(0,-1)) then
		  	a.y=a.y-1
		  else
		  	a.new_y+=1
		  end
		 end
	  jump=true
	  if a.noise<94 then
		  a.noise+=7
	  else 
	  	a.noise = 100
	  end
	 end
 end
 
	 --shoot
 if (btn(4)) then
 	now = time()
 	if now - last_attack > attack_cooldown then
			a.state = 8
			shoot_left()
			last_attack = time()
			
			if a.noise<92 then
	 	 a.noise+=9
	  else 
	 	 a.noise = 100
	 	end
		end
	end
	
 if(btn(5)) then
  now = time()
		if now-last_attack > attack_cooldown then
		 a.state = 9
 		shoot_right()
 		last_attack = time()
 		
			if a.noise<92 then
	 	 a.noise+=9
	 	else 
	 	 a.noise = 100
	 	end
		end
	end
	 
	 -- interact
 if btn(3) then
		if player_interaction_collision() then
					last_x = a.x
					last_map = game_map
					game_map = interaction_map
 				a.x = 3
 				a.new_x = 3
 				sfx(2)
 				game_map_init()
		end
 end
	 
	a.invincible-=1 
	if a.invincible < 0 then
		if player_zombie_collision() then
			a.hp-=1
			a.invincible = 30
		end
	end 
end

function shoot_left()
 a.attacking_left = true
 a.attacking_right = false
 
 --weapon 1 = pistol
	if(a.weapon==1) then
		make_bullet(a.x-6,a.y-7,-1)
	end
	sfx(5)
end

function shoot_right()
 a.attacking_right = true
 a.attacking_left = false
 
 -- weapon 1 = pistol
	if(a.weapon==1) then
		make_bullet(a.x+6,a.y-7,1)
	end
	sfx(5)
end


function check_moving(moving)
	if(btn(0) or btn(1)) then
		moving = true
	else
	 moving = false
	end
	return moving
end

-->8
-- zombies --

function make_zombie(x,y,speed,gm)
	local z={}
	z.x = x
	z.y = y
	z.new_x = x
	z.new_y = y-8
	-- -8 because otherwise the top
	-- of the zombie isnt considered
	-- in the hitbox.
	z.h = 12
	z.w = 6
	z.spr = 33
	z.accel = 0
	z.speed = speed
	z.hp = 7
	z.hurt = false
	z.blocked = false
	-- frame until the zombie is
	-- out of the ground
	z.spawning = 50
	-- map where the zombie is located
	z.map_location = gm
	-- is on map
	z.on_map = true
	
	z.attacking_obstacle = 0
	
	add(zombie,z)
	
	return z
end

function accel_zombie()
	for z in all(zombie) do
		if(a.noise == 100) then 
			z.accel = 2
		elseif a.noise>=50 then
			z.accel = 1
		elseif a.noise==0 then
			z.accel = 0
		else
			z.accel = 0.5 
		end
	end
end

function zombie_moving()
	a.hurt = false
	accel_zombie()
	
	for z in all(zombie) do
	
		if z.map_location == game_map then
			z.on_map = true	
		else
			z.on_map = false
		end
	
		if z.spawning < 0 then
			if z.hurt and z.on_map then
				z.hp-=1
				sfx(6)
			end 
		
			if z.hp == 0 then
				del(zombie,z)
					z_number-=1
				end
			
			if z.on_map then
					if z.x < a.x-1 then
						z.new_x+=z.accel*z.speed
						if not zombie_obstacle_collision() then
							z.x+=z.accel*z.speed
						else
							z.new_x-=z.accel*z.speed
							if z.attacking_obstacle < 0 then
								-- obstacle_damages()
							end
						end
					elseif z.x > a.x+1 then
						z.new_x-=z.accel*z.speed
						if not zombie_obstacle_collision() then
							z.x-=z.accel*z.speed
						else
							z.new_x+=z.accel*z.speed
							if z.attacking_obstacle < 0 then
							 --	obstacle_damages()
							end
						end
					end	
				end
			end
			if z.map_location < game_map then
				if z.x < screen_x-5 then
					z.x+=z.accel*z.speed
					z.new_x+=z.accel*z.speed
				else
					z.map_location+=1
					z.x = 3
					z.new_x = 3	
				end
			end
			if z.map_location > game_map then
				if z.x > 5 then
					z.x-=z.accel*z.speed
					z.new_x-=z.accel*z.speed				
				else
					z.map_location-=1
					z.x = screen_x-3
					z.new_x = screen_x-3
				end
			end
		
	z.spawning-=1
	-- z.attacking_obstacle-=1  
	end
end

function obstacle_damages()
	for o in all(obstacle) do
		if o.hurt then
			o.hp-=1
			o.hurt = false
			for z in all(zombie) do
				if z.blocked then
					z.attacking_obstacle = 70
				end
			end
		end
	end
end
-->8
-- bullets, obstacles and interactions -- 

-- obstacles 

function make_obstacle(x,y,w,h,c_spr)
 local o={}
	o.x = x
	o.y = y
	o.new_x = x
	o.new_y = y
	o.w = w
	o.h = h
	o.spr = c_spr
	o.hp = 100
	
	add(obstacle,o)
	
	return o
end

-- interactions

function make_interaction(x,y,w,h,tm)
	local i={}
	i.x = x
	i.y = y
	i.new_x = x
	i.new_y = y
	i.w = w
	i.h = h
	i.use = true
	
	-- type_map : 
	-- 98 = normal house
	-- 99 = haunted house
	i.type_map = tm
		
	add(interaction,i)
	
	return i
end

-- bullets

function make_bullet(x,y,dir)
	local b={}
	b.x = x
	b.y = y
	b.new_x = x
	b.new_y = y
	b.w = 5
	b.h = 2
	b.spr = 81
	b.speed = 4
	b.dir = dir

	add(bullet,b)
	
	return b
end


function bullet_moving()
	for b in all(bullet) do
	--if going right 
		if b.dir==1 then
			b.new_x+=b.speed
			if b.x < screen_x and not bullet_zombie_collision() and not bullet_obstacle_collision() then
				b.x+=b.speed
			else
				del(bullet,b)
			end
		end
		--if going left
		if b.dir==-1 then
			b.new_x-=b.speed
			if b.x > 0 and not bullet_zombie_collision() and not bullet_obstacle_collision() then
				b.x-=b.speed
			else
				del(bullet,b)
			end
		end		
	end
end
-->8
-- menu --

-- menu function
-- inspired by a code from : https://www.lexaloffle.com/bbs/?tid=27725
function lerp(startv,endv,per)
 return(startv+per*(endv-startv))
end

function change_palette()
 palnum+=1
 if (palnum>6)palnum=1
end

function update_cursor()
 if (btnp(2)) m.sel-=1 cx=m.x sfx(4)
 if (btnp(3)) m.sel+=1 cx=m.x sfx(4)
 if (btnp(4)) cx=m.x
 if (m.sel>m.amt) m.sel=1
 if (m.sel<=0) m.sel=m.amt
 cx=lerp(cx,m.x+5,0.5)
end

function draw_options()
 for i=1, m.amt do
  oset=i*8
  if i==m.sel then
   rectfill(cx,m.y+oset-1,cx+36,m.y+oset+5,col1)
   print(m.options[i],cx+1,m.y+oset,col2)
  else
   print(m.options[i],m.x,m.y+oset,col1)
  end
 end
end

function draw_octopus()
 if ox>m.x and ox<m.x+40 and
    oy>m.y and oy<m.y+32 then
   ox=rnd(112)+8
   oy=rnd(112)+8
 end
 pal(7,col1)
 spr(193,ox,oy) spr(194,ox+8,oy)
 spr(209,ox,oy+8) spr(210,ox+8,oy+8)
 pal()
end

function init_settings()
 m.sel=1
 m.options={"palette","moon","exit"}
 m.amt=0
 for i in all(m.options) do
  m.amt+=1
 end
 sub_mode=1
 menu_timer=0
end

function update_settings()
 if btnp(4) and
 menu_timer>1 then
  if m.options[m.sel]=="palette" then
   change_palette()
  elseif m.options[m.sel]=="moon" then
   octopus=not octopus
   ox=rnd(112)+8
   oy=rnd(112)+8
  elseif m.options[m.sel]=="exit" then
  	cls()
  	init_menu()
  end
 end
end

function update_menu()
	update_cursor()
 if sub_mode==0 then
  if btnp(4) and
  menu_timer>1 then
  	if m.options[m.sel]=="start" then
  		gameinit()
  	end
   if m.options[m.sel]=="settings" then
    init_settings()
   end
  end
 end
 
 if (sub_mode==1) update_settings()
 
 col1=pals[palnum][1]
 col2=pals[palnum][2]
 menu_timer+=1
end

function menuinit()
	octopus=false
 pals={{7,0},{15,1},{6,5},
			   {10,8},{7,3},{7,2}}
 palnum=5
 init_menu()
end

function init_menu()
	m={}
 m.x=8
 cx=m.x
 m.y=40
 m.options={"start","settings",
            "exit"}
 m.amt=0
 for i in all(m.options) do
  m.amt+=1
 end
 m.sel=1
 sub_mode=0
 menu_timer=0
end
-->8
-- game over and warning --

function warning_init() 
	last = time()
end

function update_warning()
	if (btn(4) or btn(5) or btn(10) or btn(11)) and (now-last)>1 then
		game_state = 0
	end
end

function gameoverinit()
	game_state = 2
end

function update_gameover()
	if btn(4) or btn(5) then
		game_state = 0
	end
end
-->8
-- collisions --

-- test if a point is solid
function solid(box1,box2)
	if ((box2.new_x >= box1.new_x + box1.w) 
			or (box2.new_x + box2.w <= box1.new_x) 
			or (box2.new_y >= box1.new_y + box1.h) 
			or (box2.new_y + box2.h <= box1.new_y)) then		
		return false
	end
	
	return true
end

function player_obstacle_collision()
	for o in all(obstacle) do
		if solid(a,o) then
			return true
		end
	end
	return false
end

function player_interaction_collision()
	for i in all(interaction) do
		if solid(a,i) then
			interaction_map = i.type_map
			return true
		end
	end
	return false
end

function player_zombie_collision()
	for z in all(zombie) do
		if solid(a,z) and z.spawning < 0 and z.on_map then
			return true
		end
	end
	return false
end

function bullet_zombie_collision()
	for b in all(bullet) do
		for z in all(zombie) do
			if solid(b,z) and z.on_map then
				z.hurt = true
				return true
			end
		end
	end
	return false
end

function bullet_obstacle_collision()
for b in all(bullet) do
		for o in all(obstacle) do
			if solid(b,o) then
				return true
			end
		end
	end
	return false
end

function zombie_obstacle_collision()
for z in all(zombie) do
		z.blocked = true
		for o in all(obstacle) do
			if solid(z,o) then
				z.blocked = true
				-- o.hurt = true
				return true
			end
		end
	end
	return false
end
__gfx__
00000000000440000004400000044000000440000004400000044000000440000004400000044000000000000000000000000000000000000003300080088008
00000000004ff400004ff400004ff400f04ff40f004ff400004ff400004ff400004ff400004ff400000000000003300000033000000000000003300080088008
00700700004ff400004ff400004ff400f04ff40f004ff400004ff400f04ff40f004ff400004ff400000000000053350000533500005335000055550080555508
00077000000ff000000ff000000ff000f00ff00f000ff000000ff000f00ff00f000ff000000ff000000000000555555005555550055335503533333385885558
000770000f5575f00f5575f00f5575f00f5575f00f5755f00f5575f0ff5575ffff5575f00f5575ff000000000355533033555333335553333055535300555850
007007000f5575f0005575f00f557500005575000f57550ff05575f0005575000055fff00fff7500000000000353333030535503305355033053550300585500
000000000f5575f00f557ff00ff575f000557500ff57550ff05575ff005575000055750000557500000000003335550030355503303555033035550300855500
000000000f5575f00055750000557500005575000057550ff0557500005575000055750000557500000000003053530030535303305353030053530000585800
00000000005575000055750000557500005575000057550000557500005575000055750000557500000000000055550000555500000000000055550000555500
00000000005575000055750000557500005575000057550000557500005575000055750000557500000000000033530000535300000000000053530000585800
00000000004444000044440000444400004444000044440000444400004444000044440000444400000000000553550003333330000000000035550000855500
0000000000dddd0000dddd0000dddd0000dddd0000dddd0000dddd0000dddd0000dddd0000dddd00000000000350050003000030000000000050050000500500
0000000000d00d0000d00d0000d00d000d000d000d000d0000d000d00d0000d000d00d0000d00d00000000000300030000000000000000000030030000800800
0000000000d00d0000d00f1001f00d000f000d000f100d0000d001f00d001fd000d00d0000d00d00000000000300033000000000000000000030050000800500
0000000000f00f0000f0001001000f0000100f0000100f1001f001000ff1100000f00f1001f00f00000000000000000000000000000000000030050000800500
00000000011001100110000000000110000010000000001001000000000100000110001001000110000000000000000000000000000000000030030000800800
0000000000008000000000666600000000000000000000000000000000000a00000000000000000000000000eeeeeeee00066000000000000000000000000000
00000000000800000000667777550000000000000a00000000000a0000000000000000000000000000000000eeeeeeee00688600000000000000000000000000
000000000089800000067777755550000000000000000000000000000a000000000000000000000000000000eeeeeeee06888860000000000000000000000000
00000000808a98080067777755555500000a0000000000000000000000000000000777700777700000000000eeeeeeee68888886000000000000000000000000
00000000089aa980006777775555550000a0a0000000000000000000000000000000005ff500000000000000eeeeeeee68888886000000000000000000000000
00000000008980000677777555555550000a0000000000000000000000000000000000500500000000000000eeeeeeee06888860000000000000000000000000
0000000000080800067777755555555000000000000000000a000000000000a0000000000000000000000000eeeeeeee00688600000000000000000000000000
000000000000000006777775555555500000000000000a000000000000000000000000000000000000000000eeeeeeee00066000000000000000000000000000
00000000000000000677777555555550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000067777755555500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000067777755555500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000006777775555000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000667777550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000006666000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000a00000a000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
04444440044404408888888800000000434b444b55555555555555550044444444444444444444000000044444444444000000004440000044444444ffffffff
400440040004400482222228000303004444344454444445544444450444444444444444444444400000444474444444000000044444000040044004ffffffff
444444444040440082000028000b0b30434444345444444554444445444444444444444444444444000044474744444440000044444440004004400455555555
4004400440044004800dd008300333b0344b43445444444554444445466646646646545545545554000475747545545555000055455450004004400444444444
4444444400440444800dd008b30bbb30444444445444444554444445444444444444444444444444004447474444444444000444444444404444444444444444
4004400440004004820000283b333bb3444444445444444554444445466646646545545545545554466645747545545555400455455455504004400444444444
444444444444044482222228b3bbb3bb4444444454444d4554d44445444444444444444444444444444444474444444444400444444444444004400444444444
400440044000400488888888bb333b334444444454444d4554d44445466646645545545545545554466646547545545555455455455455544444444444444444
d66666670000000000000000030000004b43444354444d4554d44445444444445555555544444444444444445555555555555555444444444444444554444444
5d66667600000000000000000b0303004444b4445444444554444445466646545444444545545554466646545447474557444745455455544444444554444444
55dddd660000000000000000033b0330434444345444444554444445444444445444444544444444444444445444744554747445444444444444444554444444
55dddd66000000000000000033b303b0b4434b445444444554444445466645545444444545545554466645545444444557474445455455544444444444444444
55dddd660007777000000000b3bb3b30444444445444444554444445444444445444444544444444444444445444444554744555444444444444444444444444
55dddd6600000000000000003b33bbb0444444445444444554444445466645545444444545545554066645545455444554445545455455544444444444444444
511111d60000000000000000b3bbb3b34444444454444445544444454444444454444d45444444440444444455454d4554d44445444444444444444444444444
1111111d0000000000000000bb333b334444444455555555555555554665455454444d45455455540665455454444d4554d44445455455544444444444444444
000000000000000000000000030000004be34e4345454445454644454444444454444d45444444440044444454444d4554d44445444444440555555554444444
0808080000000000000000000b0303004444b4444444644444445444466545545444444545545554006545545444444554444445455455540544444454444444
0a0a0a000000000000000000033b0330e3e4e4344644446446444454444444445444444544444444004444445744444554444445400444440554444454444444
0a0a0a00000000000000000033b303b0b4434b4e5445454454454644465545545444444545545554065545545474447554445445000055540544444454444444
00aaa000000000000000000073bb3b30444444444444444444444444444444445444444544444444044444445447474554455445000004440555555554444444
000a000000000000000000003773bbb0444444444444444444444444465545545444444545545554465545545474744554454445450055540544444454444444
000a00000000000000000000737b73b3444444444444444444444444444444445444444544444444444444445744474554544445444444440554444454444444
0aaaaa000000000000000000b7373b33444444444444444444444444455545545555555545545554455545545555555555555555455455540555555554444444
0044444444444444444444000000000000000000444444445555555500000000444444440000000044444445544444445fff5fff000000500000000044444445
044444444444444444444440005550000055500047044004444444440044444444444444444444004544544554454444f5f5ff5f000000500000000044444445
44444444444444444444444400565000005450004074407400000000044444444444444444444440444444455444445455555555000005000000000044444445
00444444444444444444440000545000005450004007470400000000444444444444444444444444444544455444444444444444000090000000000044444445
00004004000000004000400000545000005450004474744400000000444444444444444444444444444444455454544454444444000070000000000044444445
00004004000000004000400000545000005650004707470400000000444444444444444444444444444444455444444444444454000070000000000044444445
00004004000000004000400000555000005550004004707400000000444444444444444444444444454445455445444444454444444444444444444444444445
00004004000000004000400000000000000000004444444400000000444444455555555554444444445444455444445444444444555555555555555544444445
__gff__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffff0000000101000000000000000000030000000001010001000002020000000000000000000000010000020200000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
000000000000000000000000000000002b00000000000000000000000000c600002b000000000000000000000000000000002b000000000000000000000000000000502b500000000000000000000000000000002b000000210000000000000021000000002b000000000000000000000000000000002b000000000000000000
000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000502b500000000000000000000000000000002b000000600000000000000060000000002b000000000000000000000000000000582b000000000000000000
000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000502b500000000000000000000000000000002b000000000000210000000000000000002b000000000000000000000000000000682b000000000000000000
000000000000000000000000000000002bc60000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000502b500000000000000000000000000000002b000000000000600000000000000000002b000000000000000000000000000050502b000000000000000000
000000000000000000004748490000002b002636262625000026000026000024002b000000000000004a4b4c4d00000000002b000000000000000000000000000000502b5000004a4b4c490000000000000000002b000000000000000000000000000000002b000000000000000000000000005000002b000000000000000000
0000000000d1d10000005758590000002b270026222300240027000000002500002b000000000000005a5b5c5d00000000002b00000000000000000000000000002e502b500000575b5c5d0000000000000000002b000000000000000000000000000000002b000000000000000000000000500000002b000000000000000000
0000000043d1000043536768690043002b000000323300260000272724002526002b000000534363436a6b6c6d00634343002b000000000000000000000000002e2e502b5000636a6b6c6d0000000063630000002b000000000000000000634363635363432b634363636353636363536350000000002b000000000000000000
445464544464446444644464644454542b263600260000262627360026002600002b446444546464444464644444644464442b446444646454444464546444646464442b666566656666656566656566656566652b656665656566656566666565666566652b656665656666656565666666656565662bdd0000000000000000
000000000000000000000000000000002bdddd50505050505050505050505000dd2bdd00dddddddddddddddddddddddddddd2bdddddddddddddddddddddddddddddddd2bdddddddddddddddddddddddddddddddd2bdddddddddddddddddddddddddddddddd2bdddddddddddddddddddddddddddddddd2bdddddddddddddddddd
777878787878787878787878787878792b005000000000000000000000000050002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b450000000000000000000000000000002b000000000000000000
7f00000000000000000000000000006f2b500000000000000000000000000000502b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b550000000000000000000000000000002b000000000000000000
7f0000007d7e000000007e7e0000006f2b000000000000000000000000000000502b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b500000000000000000000000000000002b505050505050500000505050000050502b000000000000000000
7f0000004e4e000000004e4e0000006f2b000000000000000000000000000000502b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b005000000000000000000000000000002b000000000000000000000000000000002b000000000000000000
4500000076760060000076760000006f2b000000000000000000000000000000502b000000000000004000000040000000402b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000
55000000000070717200000000006e6f2b000000000000000000000000000000502b000000000000005000400050000000502b000000000000000000000000000000002b000000000000000000000000000000002b000000005000000000000000000000002b000000000000000000000000000000002b000000000000000000
5e4f4f4f4f4f4f4f4f4f4f4f4f4f4f5f2b000000000000000000000000000000502b000000000040005000500050004000502b000000000000000000000000000000002b000000000000000000000000000000002b000000000050000000000000000000002b000000000000000000000000000000002b000000000000000000
000000000000000000000000000000002b646464646464646464646464646464642b445444645464546464646464646464642b505050502121216566656554654454542b505021212150502121215050212150502bdddddddddddd505050505050505050502b000000000000000000000000000000002bdddddddddddddddddd
777878787878787878787878787878792b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000
7a00000000000000000000000000007b2b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000
7a0000007e7e000000007e7e0000007b2b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000
7a0000007575002100004e750000007b2b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000
4500000076760060000076760058007b2b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000
55000000000070717200000000686e7b2b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000
5e7c7c7c7c7c7c7c7c7c7c7c7c7c7c5f2b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000
dd0000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000
000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000
000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000
000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000
000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000
000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000
000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000
000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000000000000000002b000000000000000000
__sfx__
0009000000000036400565005450044300262010600126000b6000640011600064000740008400094000a4000c400000000000000000000000000000000000000000000000000000000000000000000000000000
00090000000000000000000000000632006330051000633005320053200533005320053301b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000006310053100431003310023100131004300053000630005300033000430005300053000630004300053000630000000000000000000000000000000000000000000000000000000000000000000
000103030a0700a0700a0700a0700a0700a000090000900009000090000a0000a0000b00006100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000100000000001200074003451034510345103451013100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000500000000000000026100672006700052000150000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000100000000001770017700177004770047700477003770037000170000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__music__
00 00424344
00 01424344
00 02424344
00 03424344
00 04424344
00 05424344
00 06424344

